<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.kshitijSelenium</groupId>
    <artifactId>selenium-docker</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <selenium.java.version>4.23.0</selenium.java.version>
        <logback.version>1.5.6</logback.version>
        <webdriver.manager.version>5.9.2</webdriver.manager.version>
        <testng.version>7.10.2</testng.version>
        <jackson.version>2.17.2</jackson.version>
        <!-- plugins versions -->
        <maven.compiler.version>3.11.0</maven.compiler.version>
        <maven.dependency.version>3.6.0</maven.dependency.version>
        <maven.jar.version>3.3.0</maven.jar.version>
        <maven.surefire.version>3.1.2</maven.surefire.version>
        <maven.resources.plugin>3.3.1</maven.resources.plugin>
        <!-- output directory --> <!-- here we are saying create a directory named as 'docker-resources' under directory named
        as project directory. Here 'project.build.directory' is the directory in which are project is present -->
        <package.directory>${project.build.directory}/docker-resources2</package.directory>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>${selenium.java.version}</version>
        </dependency>
        <!-- logging library -->
        <!-- https://www.baeldung.com/logback -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <!-- web-driver manager for local testing -->
        <dependency>
            <groupId>io.github.bonigarcia</groupId>
            <artifactId>webdrivermanager</artifactId>
            <version>${webdriver.manager.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- To deserialize json into Java object or vice versa -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- Test framework -->
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testng.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <finalName>selenium-dockerK</finalName> <!-- here it is just package name.This package name will be created inside
        target folder.Under this package there will be all dependencies copied using plugin.Name can be any random string -->
        <plugins>
            <!-- To compile the source code using specific java version. also to force IDE to change the settings -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.version}</version>
                <configuration>
                    <release>22</release>
                </configuration>
            </plugin>
            <!-- To run the tests using specific parameters, change thread count, testng report output directory etc -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven.surefire.version}</version>
                <configuration>
                    <systemPropertyVariables>
<!--                        <browser>chrome</browser>--> <!--This should be commented if we need to use chrome via testng xml-->
<!--                        <browser>firefox</browser>-->
                        <browser>chrome</browser>
                        <selenium.grid.enabled>false</selenium.grid.enabled>
                    </systemPropertyVariables>
                    <suiteXmlFiles>
                        <file>src/test/resources/vendor-portal.xml</file>
                        <file>src/test/resources/flight-reservationJson.xml</file>
                    </suiteXmlFiles> <!-- we need to tell here that where we are keeping are testng xml files -->
                    <threadCount>2</threadCount>
                    <reportsDirectory>target/test-output</reportsDirectory>
                </configuration>
            </plugin>
            <!-- To copy all the dependencies to run our tests as part of "mvn package" -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven.dependency.version}</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>
                                ${package.directory}/libs <!--To copy jars present in external library to directory named as 'libs'-->
                            </outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- To package our page objects, test classes into jar -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId> <!--It is used to package all the page object classes and keep it in package directory-->
                <version>${maven.jar.version}</version>
                <configuration>
                    <outputDirectory>${package.directory}</outputDirectory>
                </configuration>
                <executions> <!--Here 'test-jar' is defined as by default it will take only page object classes i.e. the files present in main.
                In order to convert classes present in 'test' folder we need to add it under execution explicitly -->
                    <execution>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                        <configuration> <!--Here I am saying to include only files which have '.class' extension.
                        **- it means any package name. * - it means any class name. -->
                            <includes>**/*.class</includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- To copy resources into the output directory -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven.resources.plugin}</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${package.directory}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/test/resources</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>